# Copyright 2014-2016 Spotify AB
# Copyright 2016-2019 The Last Pickle Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  push:
    paths-ignore:
      - "untagged-.**"
      - "master-snapshot.**"
#  pull_request:
#    paths-ignore:
#      - "untagged-.**"
#      - "master-snapshot.**"

jobs:
  build:
    name: Build Reaper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Build Reaper
        run: |
          MAVEN_OPTS="-Xmx384m" mvn -B install
          mvn -B surefire:test -Dtest=ReaperShiroIT
  its-ccm-local:
    name: H2 and Memory backends
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cassandra-version: [1.2.19, 2.0.17, 2.1.20, 2.2.13, 3.0.17, 3.11.4, 4.0-alpha3]
        storage-type: [local]
        test-type: [ccm]
        include:
          # don't run against the following C* versions when using cassandra storage type
          - cassandra-version: 1.2.19
            cucumber-options: '--tags ~@cassandra_2_1_onwards --tags ~@cassandra_4_0_onwards'
          - cassandra-version: 2.0.17
            cucumber-options: '--tags ~@cassandra_2_1_onwards --tags ~@cassandra_4_0_onwards'
          - cassandra-version: 2.1.20
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 2.2.13
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 3.0.17
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 3.11.4
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install CCM
        run: pip install pyyaml git+https://github.com/riptano/ccm
 
      - name: Setup CCM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
  its-pgsql:
    name: Postgres backend
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:9.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # this replaces the manual reaper creation
          POSTGRES_DB: reaper
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        cassandra-version: [3.11.3]
        storage-type: [postgresql]
        test-type: [ccm]
        grim-max: [1, 2, 4]
        cucumber-options: ['--tags ~@cassandra_4_0_onwards']
        # for each grim-max, specify corresponding min
        include:
          - grim-max: 1
            grim-min: 1
          - grim-max: 2
            grim-min: 2
          - grim-max: 4
            grim-min: 2
        # in case of sidecar and pgsql, we only want the grim-min/max of 1/1
        exclude:
          - test-type: sidecar
            grim-max: 2
          - test-type: sidecar
            grim-max: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install CCM
        run: pip install pyyaml git+https://github.com/riptano/ccm
 
      - name: Setup CCM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          GRIM_MAX: ${{ matrix.grim-max }}
          GRIM_MIN: ${{ matrix.grim-min }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
  its-ccm-cass:
    needs: build
    name: Cassandra backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cassandra-version: [2.1.20, 2.2.13, 3.0.17, 3.11.4, 4.0-alpha3]
        storage-type: [cassandra]
        test-type: [ccm]
        cucumber-options: ['--tags ~@cassandra_4_0_onwards']
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install CCM
        run: pip install pyyaml git+https://github.com/riptano/ccm
 
      - name: Setup CCM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
  its-elassandra:
    needs: build
    name: Elassandra Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [elassandra]
        storage-type: [elassandra]
        elassandra-version: ['6.2.3.26']
        grim-min: [1]
        grim-max: [1]
        cucumber-options: ['--tags ~@cassandra_4_0_onwards --tags ~@sidecar']
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Install ECM
        run: |
          wget -O ecm-ccm-elassandra.zip https://github.com/strapdata/ecm/archive/ccm-elassandra.zip
          unzip ecm-ccm-elassandra.zip && cd ecm-ccm-elassandra && sudo ./setup.py install

      - name: Download Elassandra
        run: |
          wget -O elassandra-${ELASSANDRA_VERSION}.tar.gz https://github.com/strapdata/elassandra/releases/download/v${ELASSANDRA_VERSION}/elassandra-${ELASSANDRA_VERSION}.tar.gz
        env:
          ELASSANDRA_VERSION: ${{ matrix.elassandra-version }}

      - name: Setup ECM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          ELASSANDRA_VERSION: ${{ matrix.elassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: |
          ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
          GRIM_MAX: ${{ matrix.grim-max }}
          GRIM_MIN: ${{ matrix.grim-min }}

  its-sidecar:
    needs: [its-ccm-local, its-pgsql, its-ccm-cass, its-elassandra]
    name: Sidecar
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:9.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # this replaces the manual reaper creation
          POSTGRES_DB: reaper
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        cassandra-version: [2.1.20, 2.2.13, 3.0.17, 3.11.3, 4.0-alpha3]
        storage-type: [cassandra, postgresql]
        test-type: [sidecar]
        grim-max: [1]
        grim-min: [1]
        # all versions but trunk have the same cucumber options, but we can't declare that more effectively (yet)
        include:
          - cassandra-version: 2.1.20
            cucumber-options: '--tags ~@cassandra_4_0_onwards --tags @sidecar'
          - cassandra-version: 2.2.13
            cucumber-options: '--tags ~@cassandra_4_0_onwards --tags @sidecar'
          - cassandra-version: 3.0.17
            cucumber-options: '--tags ~@cassandra_4_0_onwards --tags @sidecar'
          - cassandra-version: 3.11.3
            cucumber-options: '--tags ~@cassandra_4_0_onwards --tags @sidecar'
          - cassandra-version: 4.0-alpha3
            cucumber-options: '--tags @sidecar'
        # sidecar test including postgres should only run with C* 3.11.3, so we exclude all other
        exclude:
          - storage-type: postgresql
            cassandra-version: 2.1.20
          - storage-type: postgresql
            cassandra-version: 2.2.13
          - storage-type: postgresql
            cassandra-version: 3.0.17
          - storage-type: postgresql
            cassandra-version: 4.0-alpha3
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install CCM
        run: pip install pyyaml git+https://github.com/riptano/ccm
 
      - name: Setup CCM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          GRIM_MAX: ${{ matrix.grim-max }}
          GRIM_MIN: ${{ matrix.grim-min }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
  its-distributed:
    needs: [its-ccm-local, its-pgsql, its-ccm-cass, its-elassandra]
    name: Distributed tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cassandra-version: [2.1.20, 2.2.13, 3.0.17, 3.11.4, 4.0-alpha3]
        storage-type: [cassandra]
        test-type: [ccm]
        grim-max: [2]
        grim-min: [2]
        include:
          # all versions but trunk need to exclude trunk tests
          - cassandra-version: 2.1.20
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 2.2.13
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 3.0.17
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 3.11.4
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install CCM
        run: pip install pyyaml git+https://github.com/riptano/ccm
 
      - name: Setup CCM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
          GRIM_MAX: ${{ matrix.grim-max }}
          GRIM_MIN: ${{ matrix.grim-min }}
  its-flapping:
    needs: [its-ccm-local, its-pgsql, its-ccm-cass, its-elassandra]
    name: Flapping reapers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cassandra-version: [2.1.20, 2.2.13, 3.0.17, 3.11.4, 4.0-alpha3]
        storage-type: [cassandra]
        test-type: [ccm]
        grim-max: [4]
        grim-min: [2]
        include:
          # all versions but trunk need to exclude trunk tests
          - cassandra-version: 2.1.20
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 2.2.13
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 3.0.17
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
          - cassandra-version: 3.11.4
            cucumber-options: '--tags ~@cassandra_4_0_onwards'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install CCM
        run: pip install pyyaml git+https://github.com/riptano/ccm
 
      - name: Setup CCM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: |
          ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
          GRIM_MAX: ${{ matrix.grim-max }}
          GRIM_MIN: ${{ matrix.grim-min }}
  its-elassandra-distributed:
    needs: [its-ccm-local, its-pgsql, its-ccm-cass, its-elassandra]
    name: Distributed tests with Elassandra
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [elassandra]
        storage-type: [elassandra]
        elassandra-version: ['6.2.3.26']
        grim-min: [2]
        grim-max: [4]
        cucumber-options: ['--tags ~@cassandra_4_0_onwards --tags ~@sidecar']
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup CCM Cache
        uses: actions/cache@v1
        with:
          path: ~/.ccm/repository
          key: ${{ runner.os }}-ccm-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-ccm-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Install ECM
        run: |
          wget -O ecm-ccm-elassandra.zip https://github.com/strapdata/ecm/archive/ccm-elassandra.zip
          unzip ecm-ccm-elassandra.zip && cd ecm-ccm-elassandra && sudo ./setup.py install

      - name: Download Elassandra
        run: |
          wget -O elassandra-${ELASSANDRA_VERSION}.tar.gz https://github.com/strapdata/elassandra/releases/download/v${ELASSANDRA_VERSION}/elassandra-${ELASSANDRA_VERSION}.tar.gz
        env:
          ELASSANDRA_VERSION: ${{ matrix.elassandra-version }}

      - name: Setup ECM Cluster
        run: ./.github/scripts/configure-ccm.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          ELASSANDRA_VERSION: ${{ matrix.elassandra-version }}
          STORAGE_TYPE: ${{ matrix.storage-type }}

      - name: Run Tests
        run: |
          ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh || ./.github/scripts/run-tests.sh
        env:
          TEST_TYPE: ${{ matrix.test-type }}
          STORAGE_TYPE: ${{ matrix.storage-type }}
          CASSANDRA_VERSION: ${{ matrix.cassandra-version }}
          CUCUMBER_OPTIONS: ${{ matrix.cucumber-options }}
          GRIM_MAX: ${{ matrix.grim-max }}
          GRIM_MIN: ${{ matrix.grim-min }}

  release:
    name: Release Reaper
    needs: [its-distributed, its-flapping, its-sidecar, its-elassandra-distributed]
    if: startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/tag')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Maven Cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup bower
        run: npm install -g bower

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Compute version number
        run: |
          VERSION=$(printf 'VER\t${project.version}' | mvn help:evaluate | grep '^VER' | cut -f2)
          if [ "${GITHUB_REF}" = "refs/heads/master" ]
            then
                # We're building a beta version
                VERSION=$(printf 'VER\t${project.version}' | mvn help:evaluate | grep '^VER' | cut -f2)
                DATE=$(date +"%Y%m%d")
                # Bintray doesn't like snapshots, but accepts betas :)
                BETA_VERSION=$(echo $VERSION | sed "s/SNAPSHOT/BETA/")
                mvn -B versions:set "-DnewVersion=${BETA_VERSION}-${DATE}"
          fi
          echo "Releasing version ${VERSION}"

      - name: Build Reaper
        run: |
          MAVEN_OPTS="-Xmx384m" mvn -B install -DskipTests

      - name: Build packages
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: ./.github/scripts/before_deploy.sh

      - name: Upload deb package to Bintray
        run: |
          REPO=reaper-deb
          PACKAGE=cassandra-reaper
          VERSION=$(printf 'VER\t${project.version}' | mvn help:evaluate | grep '^VER' | cut -f2)
          if [ "${GITHUB_REF}" = "refs/heads/master" ]
          then
            REPO=reaper-deb-beta
            PACKAGE=cassandra-reaper-beta
          fi

          releaseFile=$(ls src/packages/*.deb |grep ${VERSION})
          targetName=reaper_${VERSION}_amd64.deb
          echo "uploading ${releaseFile} to Bintray"
          echo "Upload url : https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${targetName}"
          curl -T ${releaseFile} \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Debian-Distribution:wheezy,jessie,stretch -H X-Bintray-Debian-Component:main -H X-Bintray-Debian-Architecture:i386,amd64 -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${targetName}
          echo "Publishing release in Bintray"
          curl -X POST -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${VERSION}/publish

      - name: Upload rpm package to Bintray
        run: |
          REPO=reaper-rpm
          PACKAGE=cassandra-reaper
          VERSION=$(printf 'VER\t${project.version}' | mvn help:evaluate | grep '^VER' | cut -f2)
          RPM_VERSION=$(echo "${VERSION}" | sed "s/-/_/")
          if [ "${GITHUB_REF}" = "refs/heads/master" ]
          then
            REPO=reaper-rpm-beta
            PACKAGE=cassandra-reaper-beta
          fi

          releaseFile=$(ls src/packages/*.rpm)
          targetName=reaper-${RPM_VERSION}-1.x86_64.rpm
          echo "uploading ${releaseFile} to Bintray"
          echo "Upload url : https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${targetName}"
          curl -T ${releaseFile} \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${targetName}
          echo "Publishing release in Bintray"
          curl -X POST -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${VERSION}/publish

      - name: Upload tarball package to Bintray
        run: |
          REPO=reaper-tarball
          PACKAGE=cassandra-reaper
          VERSION=$(printf 'VER\t${project.version}' | mvn help:evaluate | grep '^VER' | cut -f2)
          if [ "${GITHUB_REF}" = "refs/heads/master" ]
          then
            REPO=reaper-tarball-beta
            PACKAGE=cassandra-reaper-beta
          fi

          releaseFile=$(ls src/packages/*.tar.gz |grep ${VERSION})
          targetName=cassandra-reaper-${VERSION}.tar.gz
          echo "uploading ${releaseFile} to Bintray"
          echo "Upload url : https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${targetName}"
          curl -T ${releaseFile} \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${targetName}
          echo "Publishing release in Bintray"
          curl -X POST -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${VERSION}/publish

      - name: Upload artifacts to GitHub Release
        uses: fnkr/github-action-ghr@v1
        if: github.event_name == 'release' && github.event.action == 'published'
        env:
          GHR_PATH: src/packages
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload maven artifacts to Bintray
        run: |
          REPO=reaper-maven
          PACKAGE=io.cassandrareaper:cassandra-reaper
          VERSION=$(printf 'VER\t${project.version}' | mvn help:evaluate | grep '^VER' | cut -f2)
          if [ "${GITHUB_REF}" = "refs/heads/master" ]
          then
            REPO=reaper-maven-beta
          fi

          jarFile=cassandra-reaper-${VERSION}.jar
          releaseFile=$(ls src/server/target/${jarFile})
          sourceFile=cassandra-reaper-${VERSION}-sources.jar
          javadocFile=cassandra-reaper-${VERSION}-javadoc.jar
          echo "uploading ${releaseFile} to Bintray"
          echo "Upload url : https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/io/cassandrareaper/cassandra-reaper/${VERSION}"

          # Upload the main jar
          curl -T src/server/target/${jarFile} \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/io/cassandrareaper/cassandra-reaper/${VERSION}/${jarFile}
          # Upload the sources jar
          curl -T src/server/target/${sourceFile} \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/io/cassandrareaper/cassandra-reaper/${VERSION}/${sourceFile}
          # Upload the javadoc jar
          curl -T src/server/target/${javadocFile} \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/io/cassandrareaper/cassandra-reaper/${VERSION}/${javadocFile}
          # Upload the pom file
          curl -T src/server/pom.xml \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/io/cassandrareaper/cassandra-reaper/${VERSION}/cassandra-reaper-${VERSION}.pom
          # Upload the root pom file
          curl -T pom.xml \
            -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} \
            -H X-Bintray-Version:${VERSION} \
            https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/io/cassandrareaper/cassandra-reaper/${VERSION}/cassandra-reaper-pom-${VERSION}.pom

          # Publish the release
          echo "Publishing release in Bintray"
          curl -X POST -u${{ secrets.BINTRAY_USERNAME }}:${{ secrets.BINTRAY_API_KEY }} https://api.bintray.com/content/thelastpickle/${REPO}/${PACKAGE}/${VERSION}/publish
